Лабораторная работа 3: Автодокументация в Python
================================================

Цель работы
-----------

Реализовать систему автодокументации для моделей данных с использованием tox + sphinx + GithubAction + GithubPages.

Используемые технологии
-----------------------

Tox
~~~

Tox - инструмент для автоматизации тестирования и сборки Python проектов.
В данной работе используется для:

- Сборки документации
- Запуска тестов
- Проверки качества кода

Конфигурация tox.ini:

.. code-block:: ini

   [tox]
   envlist = docs, py311
   skipsdist = True

   [testenv:docs]
   deps =
       sphinx
       sphinx-rtd-theme
   commands =
       sphinx-build -b html docs/source docs/build

Pytest
~~~~~~

Pytest - фреймворк для тестирования Python кода.

Pydantic
~~~~~~~~

Pydantic - библиотека для валидации данных и настроек с использованием аннотаций типов.

Sphinx
~~~~~~

Sphinx - инструмент для создания интеллектуальной и красивой документации.

Работа с автодокументацией
--------------------------

Документирование классов
~~~~~~~~~~~~~~~~~~~~~~~~

Используется Google Style для документирования:

.. code-block:: python

   class User(BaseModel):
       \"\"\"
       Модель пользователя системы.

       Attributes:
           id: Уникальный идентификатор пользователя
           name: Имя пользователя
           email: Электронная почта
       \"\"\"

Генерация документации
~~~~~~~~~~~~~~~~~~~~~~

Для генерации документации используется:

.. code-block:: bash

   tox -e docs
   # или
   sphinx-build -b html docs/source docs/build

Результаты работы
-----------------

- Создана система автодокументации
- Настроена автоматическая сборка через GitHub Actions
- Документация публикуется на GitHub Pages
- Реализована возможность сборки через tox